#pragma once
#include "GameEngine_Ver3_83.h"
//--------------------------------------------------------------------------------------------
// アニメーション構造体
//--------------------------------------------------------------------------------------------
struct Anim {
	ML::Point Pos[20];
	int		  imgSizeW;
	int		  imgSizeH;
	int		  Max;
	Anim() :imgSizeW(0),imgSizeH(0),Max(0)
	{
		for (int i = 0; i < 8; ++i) {
			this->Pos[i].x = 9999;
			this->Pos[i].y = 9999;
		}
	}
};


//--------------------------------------------------------------------------------------------
// ボタンの状態列挙型
//--------------------------------------------------------------------------------------------
enum class ChipType { AIR, GROUND, SPIKE, GOAL };
//--------------------------------------------------------------------------------------------
// ボタンの状態列挙型
//--------------------------------------------------------------------------------------------
enum class BuState { DOWN, ON, UP, OFF };
//--------------------------------------------------------------------------------------------
// カーソルの状態
//--------------------------------------------------------------------------------------------
enum class CursorMode { FREE, MOVE, ENEMY, MAP };
//--------------------------------------------------------------------------------------------
// ゲームモード
//--------------------------------------------------------------------------------------------
enum class GameMode { Game, Maker, SAVE, LOAD };
//--------------------------------------------------------------------------------------------
// マップチップのモード
//--------------------------------------------------------------------------------------------
enum MapchipMode { AIR, GROUND, SPIKE, GOAL };
//--------------------------------------------------------------------------------------------
// プレイヤー用ボタン列挙
//--------------------------------------------------------------------------------------------
enum PlayerButton { LBL, LBR, B1, B3, RT };
//--------------------------------------------------------------------------------------------
// マップチップ結合用の配列
//--------------------------------------------------------------------------------------------
struct ChipArr {
	static const int max = 16;
	int num[max];
	//配列のような扱いができるように
	int& operator[](int n_)
	{
		return num[n_];
	}
};
//--------------------------------------------------------------------------------------------
// マップ情報
//--------------------------------------------------------------------------------------------
struct MapFileData {
	string	mapName;						//マップ名
	string	makerName;						//制作者名
	string  imageFileName;					//使用する画像の名前
	int		startPointMapData[11][14];		//スタート地点周辺のチップデータ
	MapFileData() :
		mapName(""),
		makerName(""),
		imageFileName("")
	{
		for (int y = 0; y < 11; ++y) {
			for (int x = 0; x < 14; ++x) {
				this->startPointMapData[y][x] = 0;
			}
		}
	}
};

//--------------------------------------------------------------------------------------------
//ゲームタスク用データ
//--------------------------------------------------------------------------------------------
struct DataForPlay {
	int gameTime;				//ゲームの制限時間
	int playerHPMax;			//プレイヤーの最大HP
	ML::Vec2 playerStartPos;	//プレイヤーの開始位置

	DataForPlay() :
		gameTime(200),
		playerHPMax(50),
		playerStartPos(100, 100)
	{}

	//データのロード（正負でマップファイルかフォルダかを分ける）
	void Load(const string& fpath_);
};

//--------------------------------------------------------------------------------------------
//プレイヤー用アクションコマンド
//--------------------------------------------------------------------------------------------
struct KeyInput
{
	int LStickBR;			
	int LStickBL;			
	int B1;	
	int B3;			
	int RT;			

	//コンストラクタ
	KeyInput() :
		LStickBR(0),
		LStickBL(0),
		B1(0),
		B3(0),
		RT(0)
	{}

	KeyInput& operator+=(const KeyInput& key_){
		this->LStickBR += key_.LStickBR;
		this->LStickBL += key_.LStickBL;
		this->B1 += key_.B1;
		this->B3 += key_.B3;
		this->RT += key_.RT;

		return *this;
	}

	//1以上あるメンバをデクリメント
	void DecrementAll();
};

//--------------------------------------------------------------------------------------------
//チュートリアル用入力記憶構造体
//--------------------------------------------------------------------------------------------
struct InputData {
	KeyInput	 input;			//入力情報
	int			 distanceOfNextInput;	//次の入力までの待機時間

	InputData() :distanceOfNextInput(0)
	{}
};


//--------------------------------------------------------------------------------------------
//関数定義
//--------------------------------------------------------------------------------------------
void AppearLoad(int cuts_, int distance_, float speed_, ML::Color color_ = ML::Color(1, 1, 1, 1));	//ロードタスク出現
void DisappearLoad(int distance_, float speed_);			//ロードタスク消滅
bool LoadAnim(Anim& anim_, const string& fpath_);//アニメーション設定
ML::Box2D setCenterPoint(int w_, int h_);//矩形を原点を中心に
void DrawSetIfTuto(ML::Box2D& drawBox_, ML::Box2D& srcBox_);